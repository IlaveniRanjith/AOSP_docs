{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pixel 6A","text":"<ul> <li>Building And Flashing AOSP for Pixel 6A (Bluejay)</li> </ul>"},{"location":"#preparing-the-environment","title":"Preparing The Environment","text":"<ul> <li>We need to keep our packages up to date to avoid errors due to older ones.</li> </ul> <pre><code>sudo apt update\n</code></pre> <pre><code>sudo apt upgrade\n</code></pre>"},{"location":"#installing-necessary-tools","title":"Installing Necessary Tools","text":"<ul> <li>To build and flash our device we need some tools to convert source code into binary file for that we need to execute the below command.</li> </ul> <pre><code>sudo apt install openssh-server screen python git openjdk-8-jdk android-tools-adb bc bison build-essential \\\ncurl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev \\\nliblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool \\\nsquashfs-tools xsltproc yasm zip zlib1g-dev libtinfo5 libncurses5\n</code></pre>"},{"location":"#downloading-and-setting-the-repo-tool","title":"Downloading and setting the Repo Tool","text":"<ul> <li>When we download Android source code from google, it has hundreds of git repositories. We need to handle those files for that we need a tool called repo tool, to download and set the path execute the following code.</li> </ul> <pre><code>sudo wget 'https://storage.googleapis.com/git-repo-downloads/repo' -P /usr/local/sbin/\n</code></pre> <pre><code>sudo chmod a+x /usr/local/sbin/repo\n</code></pre> <ul> <li>We can test the repo tool by typing repo. If we get the following, it should work.</li> </ul> <p>error: repo is not installed.  Use \"repo init\" to install it here. </p>"},{"location":"#configure-the-git-tools","title":"Configure the git tools","text":"<ul> <li>Now we need to Configure the git tools by executing following commands</li> </ul> <pre><code>git config --global user.email \"you@example.com\"\n\ngit config --global user.name \"Your Name\"\n</code></pre>"},{"location":"#downloading-the-aosp-source-code","title":"Downloading the AOSP source code.","text":"<ul> <li>Create a folder in our system and download the aosp source code in it.</li> <li>Make a note of the branch and build the id of the device which we want to build and flash.</li> <li>Build Information for Pixel 6A (Bluejay)</li> <li>Branch : SD2A.220601.001.A1</li> <li> <p>Build TAG: android-12.1.0_r12</p> <p>For Code Names and branches see here CodeNames.</p> <p>For device specific vendor binaries see here DriverBinaries.</p> </li> <li> <p>To create folder enter the following commands in terminal</p> </li> </ul> <pre><code>mkdir ~/AOSP_Root\n</code></pre> <ul> <li>To change the directory from current directory</li> </ul> <pre><code>cd ~/AOSP_Root\n</code></pre> <ul> <li>This command will initialize the sources that are required for the branch mentioned after the b tag.</li> </ul> <pre><code>repo init -u https://android.googlesource.com/platform/manifest -b android-12.1.0_r12\n</code></pre> <ul> <li>If you are concern about space then use the following command with additional parameter \"--depth=1\"</li> </ul> <pre><code>repo init -u https://android.googlesource.com/platform/manifest -b android-12.1.0_r12 --depth=1\n</code></pre> <ul> <li>By executing the following command you can download the source code</li> </ul> <pre><code>repo sync -j30\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p> <ul> <li> <p>After downloading the source code you need to download the Device specific vendor binaries From here DriverBinaries and download the correct binary file using build id and branch.</p> </li> <li> <p>After downloading Binaries Place them in the AOSP_Root/ directory and extract the tar zip file using the following command.</p> </li> </ul> <pre><code>tar -xzf google_devices-bluejay-sd2a.220601.001.a1-0145bbe6.tgz\n</code></pre> <ul> <li>After extracting the above file you will get on shell script file named extract-google_devices-bluejay.sh. execute the script file using following command.</li> </ul> <pre><code>./extract-google_devices-bluejay.sh\n</code></pre> <ul> <li>While executing these file, you need to type I ACCEPT when prompted in order to execute these successfully.</li> </ul> <p>Now successfully downloaded the full source code now we need to Build the source code.</p>"},{"location":"#building-the-aosp-source-code","title":"Building the AOSP Source Code","text":"<p>NOTE</p> <p>Before executing below commands make sure you are in AOSP_Root/ Directory.</p> <ul> <li>By executing following command all essential definitions provided by envsetup.sh are loaded into the current shell.</li> </ul> <pre><code>source build/envsetup.sh\n</code></pre> <ul> <li>now you need to execute the following command to select the device specific build target.</li> </ul> <pre><code>lunch\n</code></pre> <ul> <li>the above command will show the list of avialable devices build targets you need to select your device specific target by typing corresponding number or name of the target ( in my case it is aosp_bluejay-userdebug )</li> </ul> <pre><code>aosp_bluejay-userdebug\n</code></pre> <p>NOTE</p> <p> do the below changes Specific to my branch and device</p> <ul> <li>After lunch command execute the following command to build otatools which are required to build and package the flashable zip file.</li> </ul> <pre><code>make otatools -j20\n</code></pre> <ul> <li> <p>After above command you need to modify the following file to build the vendor-bootconfig.img image file which is required in android 12 builds, but the target line is missing in my branch and device source code.</p> </li> <li> <p>File Path:  AOSP_Root/build/make/core/Makefile</p> </li> <li>to open that file use the below commands in AOSP_Root/ Terminal.</li> </ul> <pre><code>cd build/make/core\n\ngedit Makefile\n</code></pre> <ul> <li>Once you opened the above file identify the following line</li> </ul> <p>$(BUILT_TARGET_FILES_PACKAGE): $(INTERNAL_VENDOR_RAMDISK_FRAGMENT_TARGETS)</p> <p>Add below line after above line. (NOTE: use \"ctrl+f\" to search the string.)</p> <pre><code>$(BUILT_TARGET_FILES_PACKAGE): $(INTERNAL_VENDOR_BOOTCONFIG_TARGET)\n</code></pre> <ul> <li>Now goto the Root directory by typing the following command.</li> </ul> <pre><code>croot\n</code></pre> <ul> <li>Now execute the following command to build the source code</li> </ul> <pre><code>make updatepackage -j20\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p> <ul> <li> <p>After successfull completion of building source code you will get flashable zip file in the following path out/target/product/bluejay/ file named aosp_bluejay-img-eng.cdac.zip.</p> </li> <li> <p>The above file you can flash on to the device using adb and fastboot tools.</p> </li> </ul>"},{"location":"#flashing-the-aosp-source-code","title":"Flashing The AOSP source code.","text":"<ul> <li>To flash you need unlock the bootloader of the device </li> </ul>"},{"location":"#unlocking-the-bootloader-optional","title":"Unlocking the Bootloader (Optional)","text":"<p>To unlock the bootloader of the device you have to follow below steps if not done before.</p> <ol> <li>Enable the developer options by tapping 7 times on Build Number.</li> <li>Then goto developer options and enable OEM unlocking toggle and USB debugging toggle also.</li> <li> <p>Then execute the following commands on the terminal by connecting device to system.</p> <ul> <li> <p>After connecting device allow the prompt if any shows on the device by ticking the mark of Always allow from this computer <pre><code>adb reboot bootloader\n</code></pre></p> <pre><code>fastboot flashing unlock\n</code></pre> </li> </ul> </li> <li> <p>by executing above commands on the device it will show prompt and press the Volume keys untill it shows \"Unlock the bootloader\" option and then press Power button to confirm.</p> </li> <li> <p>then you can see in the device options Device state:Unlocked.</p> </li> <li> <p>then execute the following command to go back to Homepage.         <pre><code>fastboot reboot\n</code></pre></p> <ul> <li>now you succesfully unlocked the bootloader of the device.</li> </ul> </li> </ol>"},{"location":"#flashing-the-image-file","title":"Flashing the Image file.","text":"<ul> <li>To Flash image file executing the below commands in AOSP_Root/ directory.</li> </ul> <pre><code>adb reboot bootloader\n\nfastboot -w update out/target/product/bluejay/aosp_bluejay-img-eng.cdac.zip\n</code></pre> <p>NOTE</p> <p>Don't Remove your device until the above command executed sucessfully.</p> <ul> <li>After successfull completion of above command you will redirect to Homepage of your device of custom ROM.</li> </ul>"},{"location":"Kernel/","title":"Pixel 6A Kernel","text":"<ul> <li>Building And Flashing Android Kernel for Pixel 6A (Bluejay)</li> </ul>"},{"location":"Kernel/#objective","title":"Objective","text":"<p>The Aosp kernel is to be integrated with our own AOSP build for the operations which can be done with kernel level.</p>"},{"location":"Kernel/#downloading-sources-with-branch","title":"Downloading Sources with Branch","text":"<p>For downloading the sources for kernel we are using the Repo Tool and Create a directory and change to that directory by using below commands</p> <pre><code>mkdir Kernel_Root/ &amp;&amp; cd Kernel_Root/\n</code></pre> <ul> <li>Open the Kernel_Root directory in the terminal window and initialize the Repo tool in this directory by using following command</li> </ul> <p>For Kernel Branches visit this google kernel.</p> <pre><code>repo init -u https://android.googlesource.com/kernel/manifest -b android-gs-bluejay-5.10-android12L-d2\n</code></pre> <ul> <li>After Repo initialization you need to download the source code by using the following command.</li> </ul> <pre><code>repo sync -j16\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p>"},{"location":"Kernel/#changing-the-android-kernel-name","title":"Changing the Android Kernel Name","text":"<p>NOTE</p> <p>Execute the all the commands in Kernel_Root/ directory.</p> <ul> <li>Identify the Following File. Kernel_Root/build/build.sh</li> </ul> <pre><code>cd build\n</code></pre> <pre><code>gedit build.sh\n</code></pre> <ul> <li>After opeining the file find the -e LTO_CLANG_FULL and add the below lines after the above line.</li> </ul> <p>-d LOCALVERSION_AUTO \\</p> <p>--set-str LOCALVERSION \"--VISHLESHAK-BLUEJAY--\" \\</p>"},{"location":"Kernel/#compiling-the-android-kernel","title":"Compiling The Android Kernel","text":"<ul> <li> <p>To compile the kernel execute the following command.</p> </li> <li> <p>For Android 12 Builds run the following command</p> </li> </ul> <pre><code>LTO=full BUILD_KERNEL=1 ./build_bluejay.sh\n</code></pre> <ul> <li>For Android 13 Builds run the following command</li> </ul> <pre><code>LTO=full BUILD_AOSP_KERNEL=1 ./build_bluejay.sh\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p>"},{"location":"Kernel/#embedding-kernel-image-file-into-aosp-source-code","title":"Embedding Kernel Image File into AOSP source Code","text":"<ul> <li>Integrating Compiled Android kernel onto the AOSP build.</li> </ul>"},{"location":"Kernel/#initializing-the-aosp_root","title":"Initializing the AOSP_Root","text":"<ul> <li>Open the AOSP_ROOT directory in Terminal and Execute the following commands</li> </ul> <pre><code>cd AOSP_ROOT/\n</code></pre> <pre><code>source build/envsetup.sh\n</code></pre> <pre><code>lunch\n</code></pre> <ul> <li>lunch command will list out all the available devices targets, you need to select the the device which your building for. (In my case it is Pixel 6a (Bluejay)),so i will select aosp_bluejay-userdebug.</li> </ul>"},{"location":"Kernel/#copying-kernel-image-files-to-aosp","title":"Copying Kernel Image files to AOSP","text":"<ul> <li>Now copy all files in Kernel_Root/out/mixed/dist/ to the AOSP_Root/device/google/bluejay-kernel/ directory.</li> </ul> <p>NOTE</p> <p>Before copying all files take the backup of all files for in future if you want to revert back the changes.</p>"},{"location":"Kernel/#changing-the-prebuilt-boot-image-path","title":"changing the Prebuilt boot image path","text":"<ul> <li>Identify the file named BoardConfig-common.mk in the path AOSP_Root/device/google/gs101/ open the file and identify the following lines in the file</li> </ul> <p>BOARD_PREBUILT_BOOTIMAGE := $(wildcard $(TARGET_KERNEL_DIR)/boot.img)</p> <p>ifneq (,$(BOARD_PREBUILT_BOOTIMAGE))</p> <p>TARGET_NO_KERNEL := true</p> <p>else</p> <p>TARGET_NO_KERNEL := false</p> <p>endif</p> <p>Delete the Highlighted lines from the file and save the file and close it after deleting the file look like.</p> <p>TARGET_NO_KERNEL := false</p> <ul> <li>by doing above change it won't refere to prebuilt boot.img instead it will create with our own boot.img</li> </ul>"},{"location":"Kernel/#building-the-aosp-image-file-with-kernel","title":"Building The AOSP Image file with Kernel","text":"<ul> <li>Now execute the following command to build the new AOSP build Image.</li> </ul> <pre><code>make updatepackage -j16\n</code></pre> <ul> <li>With above command new AOSP Build Image is created in the following path AOSP_Root/out/target/product/bluejay/  with file name aosp_bluejay-img-eng.cdac.zip .The zip can flashed on to the mobile.</li> </ul>"},{"location":"Kernel/#flashing-aosp-image-files-to-the-device","title":"Flashing AOSP Image Files to the Device.","text":"<p>To flash the AOSP Images Execute the following commands in AOSP_Root/ directory.</p> <ul> <li>To go into Bootloader mode execute the following command</li> </ul> <pre><code>adb reboot bootloader\n</code></pre> <ul> <li>To flash the AOSP Image files execute the following command.</li> </ul> <pre><code>fastboot -w update out/target/product/bluejay/aosp_bluejay-img-eng.cdac.zip\n</code></pre>"},{"location":"Kernel/#verification","title":"Verification","text":"<ul> <li>to verify the Kernel is flashed or not connect the device to host system and execute the following commands in the terminal.</li> </ul> <pre><code>adb shell\n</code></pre> <p>Now you will be in the shell of your device and then type your command.</p> <pre><code>uname -a\n</code></pre> <p>It will display the Kernel version string with your kernel name and version.</p>"},{"location":"Pixel_7a/","title":"PIXEL 7A","text":"<ul> <li>Building And Flashing AOSP for Pixel 7A (Lynx)</li> </ul>"},{"location":"Pixel_7a/#preparing-the-environment","title":"Preparing The Environment","text":"<ul> <li>We need to keep our packages up to date to avoid errors due to older ones.</li> </ul> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Pixel_7a/#installing-necessary-tools","title":"Installing Necessary Tools","text":"<ul> <li>To build and flash our device we need some tools to convert source code into binary file for that we need to execute the below command.</li> </ul> <pre><code>sudo apt install openssh-server screen python git openjdk-8-jdk android-tools-adb bc bison build-essential \\\ncurl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev \\\nliblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool \\\nsquashfs-tools xsltproc yasm zip zlib1g-dev libtinfo5 libncurses5\n</code></pre>"},{"location":"Pixel_7a/#downloading-and-setting-the-repo-tool","title":"Downloading and setting the Repo Tool","text":"<ul> <li>When we download Android source code from google, it has hundreds of git repositories. We need to handle those files for that we need a tool called repo tool, to download and set the path execute the following code.</li> </ul> <pre><code>sudo wget 'https://storage.googleapis.com/git-repo-downloads/repo' -P /usr/local/sbin/\n</code></pre> <pre><code>sudo chmod a+x /usr/local/sbin/repo\n</code></pre> <ul> <li>We can test the repo tool by typing  repo . If we get the following, it should work.</li> </ul> <p>error: repo is not installed.  Use \"repo init\" to install it here.</p>"},{"location":"Pixel_7a/#configure-the-git-tools","title":"Configure the git tools","text":"<ul> <li>Now we need to Configure the git tools by executing following commands</li> </ul> <pre><code>git config --global user.email \"you@example.com\"\n</code></pre> <pre><code>git config --global user.name \"Your Name\"\n</code></pre>"},{"location":"Pixel_7a/#downloading-the-aosp-source-code","title":"Downloading the AOSP source code.","text":"<ul> <li>Create a folder in our system and download the aosp source code in it.</li> <li>Make a note of the branch and build the id of the device which we want to build and flash.</li> <li>Build Information for Pixel 7A (Lynx)</li> <li>Branch : TQ3A.230805.001</li> <li> <p>Build TAG: android-13.0.0_r67</p> <p>For Code Names and branches see here CodeNames.</p> <p>For device specific vendor binaries see here DriverBinaries.</p> </li> <li> <p>To create folder enter the following commands in terminal</p> </li> </ul> <pre><code>mkdir ~/AOSP_Root\n</code></pre> <ul> <li>To change the directory from current directory</li> </ul> <pre><code>cd ~/AOSP_Root\n</code></pre> <ul> <li>This command will initialize the sources that are required for the branch mentioned after the b tag.</li> </ul> <pre><code>repo init -u https://android.googlesource.com/platform/manifest -b android-13.0.0_r67\n</code></pre> <ul> <li>If you are concern about space then use the following command with additional parameter \"--depth=1\"</li> </ul> <pre><code>repo init -u https://android.googlesource.com/platform/manifest -b android-13.0.0_r67 --depth=1\n</code></pre> <ul> <li>By executing the following command you can download the source code</li> </ul> <pre><code>repo sync -j30\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p> <ul> <li>After the above command executed successfully following message will appear on the console.</li> </ul> <p> </p> Repo Sync done <ul> <li> <p>After downloading the source code you need to download the Device specific vendor binaries From here DriverBinaries and download the correct binary file using build id and branch.</p> </li> <li> <p>After downloading Binaries Place them in the AOSP_Root/ directory and extract the tar zip file using the following command.</p> </li> </ul> <pre><code>tar -xzf google_devices-lynx-tq3a.230805.001-ce153214.tgz\n</code></pre> <ul> <li>After extracting the above file you will get on shell script file named extract-google_devices-lynx.sh. execute the script file using following command.</li> </ul> <pre><code>./extract-google_devices-lynx.sh\n</code></pre> <ul> <li>While executing these file, you need to type I ACCEPT when prompted in order to execute these successfully.</li> </ul> <p>Now successfully downloaded the full source code now we need to Build the source code.</p>"},{"location":"Pixel_7a/#building-the-aosp-source-code","title":"Building the AOSP Source Code","text":"<p>NOTE</p> <p>Before executing below commands make sure you are in AOSP_Root/ Directory.</p> <ul> <li>By executing following command all essential definitions provided by envsetup.sh are loaded into the current shell.</li> </ul> <pre><code>source build/envsetup.sh\n</code></pre> <ul> <li>Now you need to execute the following command to select the device specific build target.</li> </ul> <pre><code>lunch\n</code></pre> <ul> <li>The above command will show the list of avialable devices build targets you need to select your device specific target by typing corresponding number or name of the target ( in my case it is aosp_lynx-userdebug )</li> </ul> <pre><code>aosp_lynx-userdebug\n</code></pre> <p>NOTE</p> <p> do the below changes Specific to my branch and device</p> <ul> <li>After the identifying the line add the below lines above highlighted text in the screenshot as shown in below screen shot.</li> </ul> <pre><code>ifdef BUILDING_VENDOR_KERNEL_BOOT_IMAGE\n  $(BUILT_TARGET_FILES_PACKAGE): $(INSTALLED_FILES_FILE_VENDOR_KERNEL_RAMDISK)\nendif\n</code></pre> <p> </p> After adding vendor_kernel_boot.img <ul> <li>Now goto the Root directory by typing the following command.</li> </ul> <pre><code>croot\n</code></pre> <ul> <li>Now execute the following command to build the source code.</li> </ul> <pre><code>make updatepackage -j20\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p> <ul> <li> <p>After successfull completion of building source code you will get flashable zip file in the following path out/target/product/lynx/ file named aosp_lynx-img-eng.cdac.zip.</p> </li> <li> <p>The above file you can flash on to the device using adb and fastboot tools.</p> </li> </ul>"},{"location":"Pixel_7a/#flashing-the-aosp-source-code","title":"Flashing The AOSP source code","text":"<ul> <li>To flash you need to Unlock the bootloader of the device</li> </ul>"},{"location":"Pixel_7a/#flashing-the-image-file","title":"Flashing the Image file","text":"<ul> <li>To Flash image file executing the below commands in AOSP_Root/ directory.</li> </ul> <pre><code>adb reboot bootloader\n</code></pre> <pre><code>fastboot -w update out/target/product/lynx/aosp_lynx-img-eng.cdac.zip\n</code></pre> <p>NOTE</p> <p>Don't Remove your device until the above command executed sucessfully.</p> <ul> <li>After successfull completion of above command you will redirect to Homepage of your device of custom ROM.</li> </ul>"},{"location":"Pixel_7a_kernel/","title":"PIXEL 7A Kernel","text":"<ul> <li>Building And Flashing AOSP KERNEL for Pixel 7A (Lynx)</li> </ul>"},{"location":"Pixel_7a_kernel/#objective","title":"Objective","text":"<p>The Aosp kernel is to be integrated with our own AOSP build for the operations which can be done with kernel level.</p>"},{"location":"Pixel_7a_kernel/#downloading-sources-with-branch","title":"Downloading Sources with Branch","text":"<p>For downloading the sources for kernel we are using the Repo Tool and Create a directory and change to that directory by using below commands</p> <pre><code>mkdir Kernel_Root/ &amp;&amp; cd Kernel_Root/\n</code></pre> <ul> <li>Open the Kernel_Root directory in the terminal window and initialize the Repo tool in this directory by using following command</li> </ul> <p>For Kernel Branches visit this Google kernel.</p> <pre><code>repo init -u https://android.googlesource.com/kernel/manifest -b android-gs-lynx-5.10-android13-qpr3\n</code></pre> <ul> <li>After Repo initialization you need to download the source code by using the following command.</li> </ul> <pre><code>repo sync -j16\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p>"},{"location":"Pixel_7a_kernel/#changing-the-android-kernel-name","title":"Changing the Android Kernel Name","text":"<p>NOTE</p> <p>Execute the all the commands in Kernel_Root/ directory.</p> <ul> <li>Identify the Following File. Kernel_Root/build/build.sh</li> </ul> <pre><code>cd build\n</code></pre> <pre><code>gedit build.sh\n</code></pre> <ul> <li>After opeining the file find the -e LTO_CLANG_FULL and add the below lines after the above line.</li> </ul> <p>-d LOCALVERSION_AUTO \\</p> <p>--set-str LOCALVERSION \"--Lynx-PIXEL_7A--\" \\</p>"},{"location":"Pixel_7a_kernel/#compiling-the-android-kernel","title":"Compiling The Android Kernel","text":"<ul> <li>To compile the kernel execute the following command.</li> </ul> <pre><code>LTO=full BUILD_AOSP_KERNEL=1 ./build_lynx.sh\n</code></pre> <p>NOTE</p> <p>The above command will take significant time depends upon the Internet speed and system configuration.</p>"},{"location":"Pixel_7a_kernel/#embedding-kernel-image-file-into-aosp-source-code","title":"Embedding Kernel Image File into AOSP source Code","text":"<ul> <li>Integrating Compiled Android kernel onto the AOSP build.</li> </ul>"},{"location":"Pixel_7a_kernel/#initializing-the-aosp_root","title":"Initializing the AOSP_Root","text":"<ul> <li>Open the AOSP_ROOT directory in Terminal and Execute the following commands</li> </ul> <pre><code>cd AOSP_ROOT/\n</code></pre> <pre><code>source build/envsetup.sh\n</code></pre> <pre><code>lunch\n</code></pre> <ul> <li>lunch command will list out all the available devices targets, you need to select the the device which your building for. (In my case it is Pixel 7a (Lynx)),so i will select aosp_lynx-userdebug.</li> </ul> Pixel 7A lunch menu"},{"location":"Pixel_7a_kernel/#copying-kernel-image-files-to-aosp","title":"Copying Kernel Image files to AOSP","text":"<ul> <li>Now copy all files in Kernel_Root/out/mixed/dist/ to the AOSP_Root/device/google/lynx-kernel/ directory.</li> </ul> <p>NOTE</p> <p>Before copying all files take the backup of all files for in future if you want to revert back the changes.</p>"},{"location":"Pixel_7a_kernel/#changing-the-prebuilt-boot-image-path","title":"changing the Prebuilt boot image path","text":"<ul> <li>Identify the file named BoardConfig-common.mk in the path AOSP_Root/device/google/gs201/ open the file and identify the following lines in the file</li> </ul> <p>BOARD_PREBUILT_BOOTIMAGE := $(wildcard $(TARGET_KERNEL_DIR)/boot.img)</p> <p>ifneq (,$(BOARD_PREBUILT_BOOTIMAGE))</p> <p>TARGET_NO_KERNEL := true</p> <p>else</p> <p>TARGET_NO_KERNEL := false</p> <p>endif</p> <p>Delete the Highlighted lines from the file and save the file and close it after deleting the file look like.</p> <p>TARGET_NO_KERNEL := false</p> <ul> <li>by doing above change it won't refere to prebuilt boot.img instead it will create with our own boot.img</li> </ul>"},{"location":"Pixel_7a_kernel/#building-the-aosp-image-file-with-kernel","title":"Building The AOSP Image file with Kernel","text":"<ul> <li>Now execute the following command to build the new AOSP build Image.</li> </ul> <pre><code>make updatepackage -j16\n</code></pre> <ul> <li>With above command new AOSP Build Image is created in the following path AOSP_Root/out/target/product/lynx/  with file name aosp_lynx-img-eng.cdac.zip . The zip can flashed on to the mobile.</li> </ul>"},{"location":"Pixel_7a_kernel/#flashing-aosp-image-files-to-the-device","title":"Flashing AOSP Image Files to the Device.","text":"<p>To flash the AOSP Images Execute the following commands in AOSP_Root/ directory.</p> <ul> <li>To go into Bootloader mode execute the following command</li> </ul> <pre><code>adb reboot bootloader\n</code></pre> <ul> <li>To flash the AOSP Image files execute the following command.</li> </ul> <pre><code>fastboot -w update out/target/product/lynx/aosp_lynx-img-eng.cdac.zip\n</code></pre>"},{"location":"Pixel_7a_kernel/#verification","title":"Verification","text":"<ul> <li>to verify the Kernel is flashed or not connect the device to host system and execute the following commands in the terminal.</li> </ul> <pre><code>adb shell\n</code></pre> <p>now you will be in the shell of your device and then type your command without $ symbol.</p> <pre><code> uname -a\n</code></pre> <p>It will display the Kernel version string with your kernel name and version as shown below.</p> <p>Linux version 5.10.157--Lynx-PIXEL7A-+</p>"}]}